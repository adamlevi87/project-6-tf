name: Terraform Pipeline

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to manage"
        required: true
        default: dev
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: "Terraform action to perform"
        required: true
        default: plan
        type: choice
        options:
          - plan
          - apply
          - plan-and-apply
          - bootstrap-all
          - update-apps
          - destroy
      auto_merge_pr:
        description: "Auto-merge GitOps PRs"
        required: false
        default: true
        type: boolean

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write  # Required for OIDC
      
    defaults:
      run:
        working-directory: main/

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          case "${{ github.event.inputs.env }}" in
            dev)
              echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
              echo "ARGOCD_APP_ID=${{ secrets.ARGOCD_APP_ID_TF_DEV }}" >> $GITHUB_ENV
              echo "ARGOCD_INSTALLATION_ID=${{ secrets.ARGOCD_INSTALLATION_ID_TF_DEV }}" >> $GITHUB_ENV
              echo "ARGOCD_PRIVATE_KEY_B64=${{ secrets.ARGOCD_PRIVATE_KEY_TF_DEV }}" >> $GITHUB_ENV
              echo "OAUTH_GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID_TF_DEV }}" >> $GITHUB_ENV
              echo "OAUTH_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET_TF_DEV }}" >> $GITHUB_ENV
              ;;
            staging)
              echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
              echo "ARGOCD_APP_ID=${{ secrets.ARGOCD_APP_ID_TF_STAGING }}" >> $GITHUB_ENV
              echo "ARGOCD_INSTALLATION_ID=${{ secrets.ARGOCD_INSTALLATION_ID_TF_STAGING }}" >> $GITHUB_ENV
              echo "ARGOCD_PRIVATE_KEY_B64=${{ secrets.ARGOCD_PRIVATE_KEY_TF_STAGING }}" >> $GITHUB_ENV
              echo "OAUTH_GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID_TF_STAGING }}" >> $GITHUB_ENV
              echo "OAUTH_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET_TF_STAGING }}" >> $GITHUB_ENV
              ;;
            prod)
              echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
              echo "ARGOCD_APP_ID=${{ secrets.ARGOCD_APP_ID_TF_PROD }}" >> $GITHUB_ENV
              echo "ARGOCD_INSTALLATION_ID=${{ secrets.ARGOCD_INSTALLATION_ID_TF_PROD }}" >> $GITHUB_ENV
              echo "ARGOCD_PRIVATE_KEY_B64=${{ secrets.ARGOCD_PRIVATE_KEY_TF_PROD }}" >> $GITHUB_ENV
              echo "OAUTH_GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID_TF_PROD }}" >> $GITHUB_ENV
              echo "OAUTH_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET_TF_PROD }}" >> $GITHUB_ENV
              ;;
          esac
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend-config=../environments/${{ github.event.inputs.env }}/backend.config

      - name: Terraform Action
        run: |
          COMMON_VARS=(
            -var-file="../environments/${{ github.event.inputs.env }}/terraform.tfvars"
            -var="github_token=${{ secrets.TOKEN_GITHUB }}"
            -var="aws_region=${{ env.AWS_REGION }}"
            -var="aws_iam_openid_connect_provider_github_arn=${{ secrets.PROVIDER_GITHUB_ARN }}"
            -var="github_oidc_role_arn=${{ secrets.AWS_ROLE_TO_ASSUME }}"
            -var="argocd_app_id=${{ env.ARGOCD_APP_ID }}"
            -var="argocd_installation_id=${{ env.ARGOCD_INSTALLATION_ID }}"
            -var="argocd_private_key_b64=${{ env.ARGOCD_PRIVATE_KEY_B64 }}"
            -var="github_oauth_client_id=${{ env.OAUTH_GITHUB_CLIENT_ID }}"
            -var="github_oauth_client_secret=${{ env.OAUTH_GITHUB_CLIENT_SECRET }}"
            -var="auto_merge_pr=${{ github.event.inputs.auto_merge_pr }}"
          )
          
          case "${{ github.event.inputs.action }}" in
            plan)
              terraform plan "${COMMON_VARS[@]}"
              ;;
            apply)
              terraform apply -auto-approve "${COMMON_VARS[@]}"
              ;;
            plan-and-apply)
              terraform plan "${COMMON_VARS[@]}"
              terraform apply -auto-approve "${COMMON_VARS[@]}"
              ;;
            bootstrap-all)
              terraform apply -auto-approve "${COMMON_VARS[@]}" \
                -var="bootstrap_mode=true"
              ;;
            update-apps)
              terraform apply -auto-approve "${COMMON_VARS[@]}" \
                -var="bootstrap_mode=false" \
                -var="update_apps=true"
              ;;
            destroy)
              terraform destroy -auto-approve "${COMMON_VARS[@]}"
              ;;
            *)
              echo "Invalid action: ${{ github.event.inputs.action }}"; exit 1
              ;;
          esac

      - name: Summary
        if: always()
        run: |
          echo "## Terraform Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.env }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-merge PRs**: ${{ github.event.inputs.auto_merge_pr }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY